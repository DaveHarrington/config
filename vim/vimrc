pyfile ~/config/vim/vim_py.py
"***********************************************"
" All custom keybindings
"***********************************************"
let mapleader = ','
"imap <c-[> <ESC>a
"map <c-c> <ESC>
map <Leader>n :NERDTreeToggle<CR>

"Gundo
map <leader>u :GundoToggle<CR>

" Edit in this dir
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" New tab command, prefilled with this dir
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Search and replace word under cursor
nnoremap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>

" Swap arguments in python
map <leader>a :py swap_args()<CR>

"map <leader>g :call SplitGotoDefinition()<CR>,z<CR>:wincmd k<CR>
map <leader>g :call SplitGotoDefinition()<CR>

" note: a custom comment method is used for python files
map <leader>tt <plug>NERDCommenterToggle<CR>
imap <leader>tt <Esc><plug>NERDCommenterToggle<CR>i
let g:NERDCustomDelimiters = {
    \ 'htmldjango': { 'left': '{% comment %}','right': '{% endcomment %}' },
    \ }
" Ctrl T for command T
map <C-t> :CommandT<CR>
imap <C-t> <Esc>:CommandT<CR>
map <C-y> :CommandTBuffer<CR>
imap <C-y> <Esc>:CommandTBuffer<CR>
let g:CommandTCancelMap=['<ESC>', '<C-[>']
let g:CommandTCursorLeftMap=['<Left>']
let g:CommandTCursorRightMap=['<Right>']
let g:CommandTBackspaceMap=['<C-h>', '<BS>']
ca cf CommandTFlush

set switchbuf=usetab,newtab

" vimgrep
map <F2> :Ggrep <C-R>=expand("<cword>")<CR><CR>

"Remove all trailing whitespace
nnoremap <silent> <F3> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

"Remove all trailing whitespace
map <F4> :syntax sync fromstart<CR>

" F7/F8 add/remove a breakpoint (pdb.set_trace)
map <F7> :py set_breakpoint()<cr>
imap <F7> <ESC>:py set_breakpoint()<CR>i
noremap <F8> :py remove_breakpoints()<CR>
noremap <F8> <ESC>:py remove_breakpoints()<CR>i

" ConqueTerm bindings
map <F9> :ConqueTermTab bash <CR>
let g:ConqueTerm_ExecFileKey = '<F11>'

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Fix annoying fold defaults
" fold all
noremap FH zM
" unfold all
noremap FJ zR
" toggle fold on method
noremap FL zA

" Shortcut to delete all buffers
ca BD bufdo bdelete

" `gf` jumps to the filename under the cursor.  Point at an import statement
" and jump to it!

"Quick fix window
map [q :cprev<CR>
map ]q :cnext<CR>

" Match tmux
map <C-w>_ :sp<CR>
map <C-w>\| :vsp<CR>
map <C-w>t :tabnew<CR>
"************************"
" Python stuff
" Jump to start of class
map [c :py start_class()<CR>
map ]c :py end_class()<CR>
vmap [c :<C-U>py start_class()<CR>m'gv``
vmap ]c :<C-U>py end_class()<CR>m'gv``

" Jump to start of def
map [d :py start_def()<CR>
map ]d :py end_def()<CR>
vmap [d :<C-U>py start_def()<CR>m'gv``
vmap ]d :<C-U>py end_def()<CR>m'gv``

" Ctrl-c, party like it's 1995
vmap <C-c> "*y
"************************"
" Fix annoyances:

"
cnoremap <C-k> <UP>
cnoremap <C-j> <DOWN>

"Save file with sudo if you forgot with w!!
cmap w!! w !sudo tee % >/dev/null

" Auto completion with ctrl-space
"inoremap <C-SPACE> <C-n>
"inoremap <C-Nul> <C-n>

" Annoying when you have just hit shift v for visual mode!
vnoremap <S-j> j
vnoremap <S-k> k

  " ctrl tab to change tabs
noremap <c-w><c-i> :tabprev<cr>
noremap <c-w><c-o> :tabnext<cr>
noremap <c-w><c-t> :tabnew<cr>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

nnoremap ' `
nnoremap ` '

"Clear highlights with ,/
nmap <silent> ,/ :nohlsearch<CR>

noremap <C-S-p> "0p

"***********************************************"
"Pathogen Init
source ~/config/vim/bundle/vim-pathogen/autoload/pathogen.vim
if exists("*pathogen#infect")
  let g:pathogen_disabled=['supertab']
  call pathogen#infect()
endif

if version >= 700
  " colour column
  set colorcolumn:81
endif

" NERDTree configuration
let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']

" Breaks Glog
let g:pyflakes_use_quickfix = 0

" Command-T configuration
let g:CommandTMaxHeight=20
"|:CommandTFlush|Instructs the plug-in to flush its path cache

" PyFlakes highlighting
highlight clear SpellBad highlight SpellBad term=underline cterm=underline gui=underline

" % to bounce from do to end etc.
runtime! macros/matchit.vim

" Make grep load in quickfix window
autocmd QuickFixCmdPost *grep* cwindow

" Autoread files when changed externally
set autoread

" Status line config
set statusline=
set statusline +=\ %n\ %*            "buffer number
if exists('g:loaded_pathogen')
  set statusline +=%{fugitive#statusline()} "fugitive
endif
set statusline +=\ %<%F%*            "full path
set statusline +=%m%*                "modified flag
set statusline+=%=                           " right align
set statusline +=%{v:register}
set statusline +=%y%*                "file type
set statusline +=%l%*                  "current line
set statusline +=/%L%*               "total lines
set statusline +=\ %c%*             "column number
"set statusline +=%2*0x%04B\ %*          "character under cursor

"Other boring vim stuff
set nocompatible
set title
set hidden
set number
set ruler
set history=1000
set scrolloff=3
syntax on

set splitbelow
set splitright

" omnicomplete/supertab settings
"let g:SuperTabDefaultCompletionType="context"
"let g:SuperTabContextDefaultCompletionType="<c-x><c-k>"
"let g:SuperTabLongestHighlight = 1

" Search tags in real time :P
set complete-=i
" Don't guess if you don't know
set completeopt+=longest

"folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

" Intuitive backspacing in insert mode
set backspace=indent,eol,start

" Set encoding
set encoding=utf-8

" Whitespace stuff
set nowrap
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set list listchars=tab:\ \ ,trail:Â·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Status bar
set laststatus=2

" enable using the mouse if terminal emulator
" supports it (xterm does)
set mouse=a
set ttymouse=xterm2

" Eh, swapfiles
set nobackup
set noswapfile

"Don't drop select after indent
:vnoremap > >gv
:vnoremap < <gv

"Scroll through long lines properly
nnoremap j gj
nnoremap k gk

"No arrow keys, don't be lazy!
"map <up> <nop>
"map <down> <nop>
"map <left> <nop>
"map <right> <nop>

" Python specific
" More syntax highlighting.
let python_highlight_all = 1

" Wrap at 72 chars for comments.
set formatoptions=cq textwidth=72 foldignore= wildignore+=*.py[co]

au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 smarttab expandtab nowrap list
au FileType python map <buffer> <leader>tt :py toggle_comment()<CR>
au FileType python imap <buffer> <leader>tt <ESC>:py toggle_comment()<CR>i

au FileType htmldjango set wrap nolist breakat==}>

au FileType json set equalprg=json_reformat

" Smart indenting
"set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class

let g:pydoc_cmd = "/usr/bin/pydoc"
let g:pydoc_open_cmd = "vsplit"

" Use :make to see syntax errors. (:cn and :cp to move around, :dist to see
" all errors)
set makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\"
set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m

" load the plugin and indent settings for the detected filetype
filetype on
filetype plugin indent on

" Use modeline overrides
set modeline
set modelines=10

" Default color scheme
color dave256

" MacVIM shift+arrow-keys behavior (required in .vimrc)
let macvim_hig_shift_movement = 1

" Show (partial) command in the status line
set showcmd

" Custom vim commands
" Goto def, python aware
function! SplitGotoDefinition()
    let curr_win_num = winnr()
    exe "wincmd j"
    if (curr_win_num != winnr())
      q!
    endif
    exe 40 . "split"
    call RopeGotoDefinition()
    exe "redraw"
    if (v:statusmsg == "Cannot find the definition!")
      exe "resize" . 1
    endif
    silent z+
    exe "wincmd k"
endfunction

" Jump to the next or previous line that has the same level or a lower
" level of indentation than the current line.
"
" exclusive (bool): true: Motion is exclusive
"                   false: Motion is inclusive
" fwd (bool): true: Go to next line
"             false: Go to previous line
" lowerlevel (bool): true: Go to line with lower indentation level
"                    false: Go to line with the same indentation level
" skipblanks (bool): true: Skip blank lines
"                    false: Don't skip blank lines
function! NextIndent(exclusive, fwd, lowerlevel, skipblanks)
  let line = line('.')
  let column = col('.')
  let lastline = line('$')
  let indent = indent(line)
  let stepvalue = a:fwd ? 1 : -1
  while (line > 0 && line <= lastline)
    let line = line + stepvalue
    if ( ! a:lowerlevel && indent(line) == indent ||
          \ a:lowerlevel && indent(line) < indent)
      if (! a:skipblanks || strlen(getline(line)) > 0)
        if (a:exclusive)
          let line = line - stepvalue
        endif
        exe line
        exe "normal " column . "|"
        return
      endif
    endif
  endwhile
endfunction

nohlsearch
set t_Co=256

if !has('gui_running')
  autocmd InsertEnter * set cul
  autocmd InsertLeave * set nocul
endif

" tmux will only forward escape sequences to the terminal if surrounded by a DCS sequence
" http://sourceforge.net/mailarchive/forum.php?thread_name=AANLkTinkbdoZ8eNR1X2UobLTeww1jFrvfJxTMfKSq-L%2B%40mail.gmail.com&forum_name=tmux-users

if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

