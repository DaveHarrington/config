pyfile ~/config/vim/vim_py.py
"***********************************************"
" All custom keybindings
"***********************************************"
let mapleader = ','

map <Leader>n :NERDTreeToggle<CR>

"Gundo
map <leader>u :GundoToggle<CR>

" Edit in this dir
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" New tab command, prefilled with this dir
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Search and replace word under cursor
nnoremap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>

" Swap arguments in python
map <leader>a :py swap_args()<CR>

" Quickbuff
let g:qb_hotkey = "<C-y>"

" CTRL Shortcuts
" Goto def, python aware
function! SplitGotoDefinition()
    let curr_win_num = winnr()
    exe "wincmd j"
    if (curr_win_num != winnr())
      q!
    endif
    exe 20 . "split"
    call RopeGotoDefinition()
    if (v:statusmsg == "Cannot find the definition!")
      z5
    endif
    exe "redraw"
    z
    exe "wincmd k"
endfunction

map <leader>g :call SplitGotoDefinition()<CR>

" Command-p to toggle comments
" note: a custom comment method is used for python files
map <C-p> <plug>NERDCommenterToggle<CR>
map <C-p> <Esc><plug>NERDCommenterToggle<CR>i

" Ctrl T for command T
map <C-t> :CommandT<CR>
imap <C-t> <Esc>:CommandT<CR>

" Function keys
" vimgrep
map <F2> :execute "!git grep expand("<cword>")<CR>

"Remove all trailing whitespace
:nnoremap <silent> <F3> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" F7/F8 add/remove a breakpoint (pdb.set_trace)
map <F7> :py set_breakpoint()<cr>
map <F8> :py remove_breakpoints()<cr>

" ConqueTerm bindings
map <F9> :ConqueTermTab bash <CR>
let g:ConqueTerm_ExecFileKey = '<F11>'

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Fix annoying fold defaults
" fold all
noremap FJ zM
" unfold all
noremap FK zR
" toggle fold on method
noremap FL zA

" `gf` jumps to the filename under the cursor.  Point at an import statement
" and jump to it!

"************************"
" Fix annoyances:

" Better word replace
nnoremap <S-R> :call ReplaceInsert()<CR>

"Save file with sudo if you forgot with w!!
cmap w!! w !sudo tee % >/dev/null

" Auto completion with ctrl-space
inoremap <C-SPACE> <C-n>

" Annoying when you have just hit shift v for visual mode!
vnoremap <S-j> j
vnoremap <S-k> k

" Change :W to :w
cnoreabbrev W w

" ctrl tab to change tabs
noremap <c-tab> :tabnext<cr>
noremap <c-s-tab> :tabprev<cr>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

"Ctrl j is escape
inoremap <C-l> <ESC>
noremap <C-l> <ESC>
let g:ConqueTerm_EscKey = '<C-l>'
cnoremap <unique> <C-l> <Esc>

noremap ; :
nnoremap ' `
nnoremap ` '

"Clear highlights with ,/
nmap <silent> ,/ :nohlsearch<CR>

" Paste last yanked
noremap <S-p> "0p

" don't shut on typo!
map ZZ <null>

"***********************************************"

"Pathogen Init
source ~/config/vim/bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()

" colour column
set colorcolumn:81

" NERDTree configuration
let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']

" Command-T configuration
let g:CommandTMaxHeight=20

" PyFlakes highlighting
highlight clear SpellBad highlight SpellBad term=underline cterm=underline gui=underline

" % to bounce from do to end etc.
runtime! macros/matchit.vim

" Status line config
set statusline=
set statusline +=\ %n\ %*            "buffer number
set statusline +=%{fugitive#statusline()} "fugitive
set statusline +=\ %<%F%*            "full path
set statusline +=%m%*                "modified flag
set statusline+=%=                           " right align
set statusline +=%{v:register}
set statusline +=%y%*                "file type
set statusline +=%l%*                  "current line
set statusline +=/%L%*               "total lines
set statusline +=\ %c%*             "column number
"set statusline +=%2*0x%04B\ %*          "character under cursor

"Other boring vim stuff
set nocompatible
set title
set hidden
set number
set ruler
set history=1000
set scrolloff=3
syntax on

set splitbelow
set splitright

" omnicomplete/supertab settings
"let g:SuperTabDefaultCompletionType="context"
"let g:SuperTabContextDefaultCompletionType="<c-x><c-k>"
"let g:SuperTabLongestHighlight = 1

" Search tags in real time :P
set complete-=i
" Don't guess if you don't know
set completeopt+=longest

"folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

" Intuitive backspacing in insert mode
set backspace=indent,eol,start

" Set encoding
set encoding=utf-8

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:Â·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Status bar
set laststatus=2

" enable using the mouse if terminal emulator
" supports it (xterm does)
set mouse=a

" Eh, swapfiles
set nobackup
set noswapfile

"Don't drop select after indent
:vnoremap > >gv
:vnoremap < <gv

"Scroll through long lines properly
nnoremap j gj
nnoremap k gk

"No arrow keys, don't be lazy!
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Python specific
" More syntax highlighting.
let python_highlight_all = 1

" Wrap at 72 chars for comments.
set formatoptions=cq textwidth=72 foldignore= wildignore+=*.py[co]

au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 smarttab expandtab nowrap list
au FileType python noremap <C-p> :py toggle_comment()<CR>
au FileType python inoremap <C-p> <ESC>:py toggle_comment()<CR>i

" Smart indenting
"set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class

let g:pydoc_cmd = "/usr/bin/pydoc"
let g:pydoc_open_cmd = "vsplit"

" Use :make to see syntax errors. (:cn and :cp to move around, :dist to see
" all errors)
set makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\"
set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m

" load the plugin and indent settings for the detected filetype
filetype on
filetype plugin indent on

" Use modeline overrides
set modeline
set modelines=10

" Default color scheme
color desert

" MacVIM shift+arrow-keys behavior (required in .vimrc)
let macvim_hig_shift_movement = 1

" Show (partial) command in the status line
set showcmd

