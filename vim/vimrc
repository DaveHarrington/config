"Pathogen Init
source ~/.vim/bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()
syntax on
filetype plugin indent on

" enable using the mouse if terminal emulator
" supports it (xterm does)
set mouse=a

set nobackup
set noswapfile

"Overwrite crazy janus settings
au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 wrap list

"Remove all trailing whitespace
:nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" ctrl tab to change tabs
noremap <c-tab> :tabnext<cr>
noremap <c-s-tab> :tabprev<cr>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e ~/config/.vimrc.local<CR>
nmap <silent> <leader>sv :so ~/config/.vimrc.local<CR>

inoremap <C-j> <ESC>
noremap <C-j> <ESC>
nnoremap ; :

"Scroll through long lines properly
nnoremap j gj
nnoremap k gk

"Don't drop select after indent
:vnoremap > >gv
:vnoremap < <gv

"map indent to tab
:vnoremap <Tab> >gv
:vnoremap <S-Tab> <gv
:noremap <Tab> >
:noremap <S-Tab> <

"Clear highlights with ,/
nmap <silent> ,/ :nohlsearch<CR>

"Save file with sudo if you forgot with w!!
cmap w!! w !sudo tee % >/dev/null

"No arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" More syntax highlighting.
let python_highlight_all = 1

" Smart indenting
set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class

" Auto completion via ctrl-space
inoremap <C-SPACE> <C-n>

" Get this plugin from http://www.vim.org/scripts/script.php?script_id=1112
" Pressing "K" takes you to the documentation for the word under the cursor.
"autocmd filetype python source $HOME/.vim/ftplugin/python_pydoc.vim
"let g:pydoc_cmd = "/usr/bin/pydoc"
"let g:pydoc_open_cmd = "vsplit"

" Wrap at 72 chars for comments.
set formatoptions=cq textwidth=72 foldignore= wildignore+=*.py[co]

" `gf` jumps to the filename under the cursor.  Point at an import statement
" and jump to it!
python << EOF
import os
import sys
import vim
for p in sys.path:
    if os.path.isdir(p):
        vim.command(r"set path+=%s" % (p.replace(" ", r"\ ")))
EOF

" Generate tags with: ctags -R -f ~/.vim/tags/python24.ctags /usr/lib/python2.4/
" ctrl-[ to go to the tag under the cursor, ctrl-T to go back.
"set tags+=$HOME/.vim/tags/python26.ctags

" Use :make to see syntax errors. (:cn and :cp to move around, :dist to see
" all errors)
set makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\"
set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m

" Execute a selection of code (very cool!)
" Use VISUAL to select a range and then hit ctrl-h to execute it.
python << EOL
import vim
def EvaluateCurrentRange():
    eval(compile('\n'.join(vim.current.range),'','exec'),globals())
EOL
map <C-h> :py EvaluateCurrentRange()

" Use F7/Shift-F7 to add/remove a breakpoint (pdb.set_trace)
" Totally cool.
python << EOF
def SetBreakpoint():
    import re
    nLine = int( vim.eval( 'line(".")'))

    strLine = vim.current.line
    strWhite = re.search( '^(\s*)', strLine).group(1)

    vim.current.buffer.append(
       "%(space)spdb.set_trace() %(mark)s Breakpoint %(mark)s" %
         {'space':strWhite, 'mark': '#' * 30}, nLine - 1)

    for strLine in vim.current.buffer:
        if strLine == "import pdb":
            break
    else:
        vim.current.buffer.append( 'import pdb', 0)
        vim.command( 'normal j1')

vim.command( 'map <f7> :py SetBreakpoint()<cr>')

def RemoveBreakpoints():
    import re

    nCurrentLine = int( vim.eval( 'line(".")'))

    nLines = []
    nLine = 1
    for strLine in vim.current.buffer:
        if strLine == "import pdb" or strLine.lstrip()[:15] == "pdb.set_trace()":
            nLines.append( nLine)
        nLine += 1

    nLines.reverse()

    for nLine in nLines:
        vim.command( "normal %dG" % nLine)
        vim.command( "normal dd")
        if nLine < nCurrentLine:
            nCurrentLine -= 1

    vim.command( "normal %dG" % nCurrentLine)

vim.command( "map <s-f7> :py RemoveBreakpoints()<cr>")
EOF

"vim:syntax=vim

